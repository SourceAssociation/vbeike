<?php	class IndexAction extends Action{				function _initialize(){					}				function index(){    //攻略中心 			$path=UPLOAD_PATH.'/freshman/';			$i=0;  $file=array();			if(file_exists($path)){				$dir=opendir($path);				while($list=readdir($dir)){					$file[$i]=iconv("GB2312","UTF-8",$list);					$i++;				}				closedir($dir);			}			unset($i);			$txt=APP_PATH.'/Tpl/default/Public/article1.txt';			$article=file($txt);			$this->assign("word",$article);			$this->assign("file",$file);			$this->display();		}				function school(){     	   //玩转校园			$faces=getUserFace($mid);			$this->assign("faces",$faces);			$content="zhe shi editor test";			$this->assign("content",$content);			$this->display();		}				function freshman(){        //新生报到			$path=UPLOAD_PATH.'/freshman';			$i=0;  $file=array();			if(file_exists($path)){				$dir=opendir($path);				while($list=readdir($dir)){					$file[$i]=iconv("GB2312","UTF-8",$list);					$i++;				}				closedir($dir);			}			unset($i);			$this->assign("file",$file);						$data['search_key'] ='新生报到';			Session::pause();			// 专题信息			if (false == $data['topics'] = D('Topics', 'weibo')->getTopics($data['search_key'], $_GET['id'], $_GET['domain'], 1)) {				if (null == $data['search_key']) {					$this->error(L('special_not_exist'));				}				$data['topics']['name'] = t($data['search_key']);			}			$data['search_key'] = $data['search_key'] ? $data['search_key'] : html_entity_decode($data['topics']['name'], ENT_QUOTES);			$data['search_key_id'] = $data['topics']['topic_id'] ? $data['topics']['topic_id'] : D('Topic', 'weibo')->getTopicId($data['search_key']);			$data['followState'] = D ('Follow', 'weibo')->getTopicState ($this->mid, $data['search_key']);			// 其他关注该话题的人			$data['other_following'] = D('Follow', 'weibo')->field('uid')										->where("uid<>{$this->mid} AND fid={$data['search_key_id']} AND type=1")										->limit(9)->findAll();			// 微博列表			$data['type'] = h ( $_GET ['type'] );			$data['list'] = D ( 'Operate', 'weibo' )->doSearchWithTopic ( "#{$data['topics']['name']}#", $data ['type'], $this->mid);	//      $data['list'] = D ( 'Operate', 'weibo' )->doSearch ( "#{$data['topics']['name']}#", $data ['type'] );	//      $data['list']['count'] = D ( 'Operate', 'weibo' )->where("content LIKE '%#{$data['topics']['name']}#%' AND isdel=0")->count();			// 微博Tab			$data['weibo_menu'] = array(									''  => L('all'),									'original' => L('original'),								  );			Addons::hook('home_index_weibo_tab', array(&$data['weibo_menu']));			$this->setTitle ( L('special').$data ['search_key']);			$data['search_key'] = h(t($data['search_key']));			$this->assign ( $data );			$this->display();		}		function question(){    //免提问答			$db=new Model('question');			//获取当前用户积分			$money=X('Credit')->getUserCredit($this->mid);			$res=array();  //存储反馈变量			if($_POST['submit']=="sub"){     							//提问				$moneyType='score';				$data['quid']=$this->uid;				$data['question']=t($_POST['question']);				if(empty($data['question'])){     						 //服务器验证					$this->assign("res",0);					exit;				}				$data['isprivate']=intval(t($_POST['private']));	     	//是否匿名提问				$data['givecredit']=intval(t($_POST['givecredit']));     //积分悬赏				$data['qtime']=time();								$to_weibo=t($_POST['to_weibo']);  					 //是否同步到微博								if($data['givecredit']>$money[$moneyType]['credit']){					$this->assign("res",-1);				}else{					$r=$db->add($data);					if($r){							X('Credit')->setUserCredit($this->mid,array($moneyType=>$data['givecredit']),-1);    //扣除积分							X('Credit')->setUserCredit($this->mid,array('experience'=>5),1);   						 //经验加5														if($to_weibo){   //如果要同步到微博								$wb=urlencode(serialize(array(									'url'=>U('fresh/Index/question'),								)));								$this->assign('wb',$wb);							} 							$this->assign("res",1);						}else{							$this->assign("res",0);						} 					}					unset($data);			}			$this->assign("money",$money);			//分页输出问题			$count=$db->count();			$page=new Page($count,5);			$show=$page->show();			$select=$db->order('qtime desc')->limit($page->firstRow.','.$page->listRows)->select();			$ans=M('answer');			$counts=array();			foreach($select as $k=>$v){				$ans_count=$ans->where('qid='.$v['qid'])->count();				$counts[$v['qid']]=$ans_count;			}			//print_r($counts);  exit;			$this->assign("total",$counts);			$this->assign("select",$select);			$this->assign('page',$show);			$this->setTitle('北科问问');						$this->assign('askers',$this->_getFourAskers());						$this->display();		}				function qus_mine(){    //免提问答			$db=new Model('question');			$money=X('Credit')->getUserCredit($this->mid);			$this->assign("money",$money);			$count=$db->where('quid='.$this->mid)->count();			$page=new Page($count,5);			$show=$page->show();			$select=$db->where('quid='.$this->mid)->order('qtime desc')->limit($page->firstRow.','.$page->listRows)->select();			$ans=M('answer');			$counts=array();			foreach($select as $k=>$v){				$ans_count=$ans->where('qid='.$v['qid'])->count();				$counts[$v['qid']]=$ans_count;			}			$this->assign("total",$counts);			$this->assign("select",$select);			$this->assign('page',$show);			$this->setTitle('我的问问');						$this->assign('askers',$this->_getFourAskers());			$this->display('question');		}				//获得四个免费问答者		function _getFourAskers(){			$db=M('user');			$askers=$db->where('uid<9')->limit(0,4)->select();			return $askers;		}				//获取问题回复		function getBackMsg(){			$qid=intval(t($_GET['qid']));			$db=M('answer');			$res=$db->order('atime desc')->where("qid=".$qid)->select();			$sel=array();			$tmp="";			foreach($res as $key=>$value){				$tmp=getUserFace($value['auid']);				array_push($value,getUserName($value['auid']));				array_push($value,str_replace("middle","small",$tmp));				array_push($sel,$value);			}			unset($res,$tmp);			echo json_encode($sel);		}				//提交评论		function comment(){			$comment['qid']=intval(t($_GET['qid']));			$comment['answer']=t($_GET['comment']);			$comment['isprivate']=intval(t($_GET['isprivate']));			$comment['auid']=$this->mid;			$comment['atime']=time();			$comment['getexp']=5;  				//默认获取5经验			$db=new Model('answer');			$sv=$db->add($comment);			if($sv){				X('Credit')->setUserCredit($this->mid,array('experience'=>5),1);   //获取5经验								//评论成功后发通知给提问题的人				$quid=getQuserId($comment['qid']);				$username = getUserName($this->mid);				$data['actor']=$username;				$data['sendback'] = '<br/><a href="'.U('fresh/Index/question').'">回复'.$username.'</a>';				$data['content']=$comment['answer'];				X('Notify')->send($quid,'qback',$data,$this->mid);				echo 1;			}else{				echo 2;			}			}		function setBestAns(){    //设置最佳答案			$aid=intval(t($_GET['aid']));			$qid=intval(t($_GET['qid']));			$db=M('answer');			$data['aid']=$aid;			$data['isbest']=1;			$flag=$db->save($data);						//给最佳答案的回答者加积分   考虑给出积分为0的情况			$quser_money=X('Credit')->getUserCredit($this->mid);			$question=M('question')->where('qid='.$qid)->find();			$giveCredit=$question['givecredit'];					$answer=$db->where('aid='.$aid)->find();			$auser=M('user')->where('uid='.$answer['auid'])->find();			$quser_money=X('Credit')->getUserCredit($this->mid);    	//获取提问者积分			if($quser_money['score']['credit']<$giveCredit){				echo 2;                    //积分不足			}else{				X('Credit')->setUserCredit($this->mid,array('score'=>$giveCredit),-1);				X('Credit')->setUserCredit($auser['uid'],array('score'=>$giveCredit),1);				if(flag){					$this->assign('giveCredit',$giveCredit);					echo 1;				}else{					echo 0;				}			}		}				function junxun(){ 		//军训专区			/* $path=UPLOAD_PATH.'/freshman';			$i=0;  $file=array();			if(file_exists($path)){				$dir=opendir($path);				while($list=readdir($dir)){					$file[$i]=iconv("GB2312","UTF-8",$list);					$i++;				}				closedir($dir);			}			unset($i);			$this->assign("file",$file); */				$data['search_key'] ='军训热议';			Session::pause();			// 专题信息			if (false == $data['topics'] = D('Topics', 'weibo')->getTopics($data['search_key'], $_GET['id'], $_GET['domain'], 1)) {				if (null == $data['search_key']) {					$this->error(L('special_not_exist'));				}				$data['topics']['name'] = t($data['search_key']);			}			$data['search_key'] = $data['search_key'] ? $data['search_key'] : html_entity_decode($data['topics']['name'], ENT_QUOTES);			$data['search_key_id'] = $data['topics']['topic_id'] ? $data['topics']['topic_id'] : D('Topic', 'weibo')->getTopicId($data['search_key']);			$data['followState'] = D ('Follow', 'weibo')->getTopicState ($this->mid, $data['search_key']);			// 其他关注该话题的人			$data['other_following'] = D('Follow', 'weibo')->field('uid')										->where("uid<>{$this->mid} AND fid={$data['search_key_id']} AND type=1")										->limit(9)->findAll();			// 微博列表			$data['type'] = h ( $_GET ['type'] );			$data['list'] = D ( 'Operate', 'weibo' )->doSearchWithTopic ( "#{$data['topics']['name']}#", $data ['type'], $this->mid);	//      $data['list'] = D ( 'Operate', 'weibo' )->doSearch ( "#{$data['topics']['name']}#", $data ['type'] );	//      $data['list']['count'] = D ( 'Operate', 'weibo' )->where("content LIKE '%#{$data['topics']['name']}#%' AND isdel=0")->count();			// 微博Tab			$data['weibo_menu'] = array(									''  => L('all'),									'original' => L('original'),								  );			Addons::hook('home_index_weibo_tab', array(&$data['weibo_menu']));			$this->setTitle ( L('special').$data ['search_key']);			$data['search_key'] = h(t($data['search_key']));			$this->assign ( $data );			$this->display();			}				function xuemei(){   //学弟学妹  趣事杂文			$this->display();		}			}?>